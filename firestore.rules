
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- User Profiles ---
    // Anyone can read a user's public profile.
    // Only the authenticated user can write to their own profile.
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;

        // Notifications are private to the user
        match /notifications/{notificationId} {
            allow read, write: if request.auth != null && request.auth.uid == userId;
        }
    }

    // --- Plant Listings ---
    // Anyone can read and list plants.
    // Only authenticated owners can create, update, or delete their own listings.
    match /plants/{plantId} {
      allow read, list: if true;
      allow create: if request.auth != null && request.resource.data.ownerId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.ownerId == request.auth.uid;
    }

    // --- Orders ---
    // Orders are highly restricted.
    // Only the buyer or the seller can read an order document.
    // Creation should only be done via secure server-side logic (like a webhook).
    match /orders/{orderId} {
      allow create: if false; // Disallow client-side creation
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || request.auth.uid == resource.data.sellerId);
      allow update, delete: if false; // Disallow client-side updates/deletes
    }

    // --- Chats & Messages ---
    // Only participants of a chat can read or write messages.
    match /chats/{chatId} {
      allow read, write: if request.auth != null && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        allow read, write: if request.auth != null && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // --- Forums & Posts ---
    match /forums/{forumId} {
      // Anyone can read forum details.
      allow read: if true;
      // Only authenticated users can create forums.
      allow create: if request.auth != null;
      // Only the forum creator can update or delete it.
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.creatorId;

      match /posts/{postId} {
        // Anyone can read posts.
        allow read: if true;
        // Authenticated users can create posts.
        allow create: if request.auth != null;
        // Only the post author or a forum moderator/creator can update/delete.
        allow update, delete: if request.auth != null && (
          resource.data.authorId == request.auth.uid ||
          request.auth.uid == get(/databases/$(database)/documents/forums/$(forumId)).data.creatorId ||
          request.auth.uid in get(/databases/$(database)/documents/forums/$(forumId)).data.moderatorIds
        );
        
        match /comments/{commentId} {
            // Anyone can read comments
            allow read: if true;
            // Only authenticated users can create, update, or delete their own comments.
            allow create: if request.auth != null;
            allow update, delete: if request.auth != null && resource.data.authorId == request.auth.uid;
        }
      }
    }

    // --- Rewards Transactions ---
    // These should only be created by a trusted server environment, not the client.
    match /rewardsTransactions/{transactionId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if false; // Client cannot create/update/delete rewards.
    }
  }
}

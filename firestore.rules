
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isParticipant(chatId) {
      let userId = request.auth.uid;
      let participants = get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      return userId in participants;
    }
    
    function getRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }
    
    function isModerator(forumId) {
        let forumData = get(/databases/$(database)/documents/forums/$(forumId)).data;
        return request.auth.uid in forumData.moderatorIds || request.auth.uid == forumData.creatorId;
    }

    // USER PROFILES
    match /users/{userId} {
      // Anyone can read public user profiles
      allow get: if true;
      
      // Users can only create their own profile document
      allow create: if isOwner(userId)
                    && request.resource.data.username is string
                    && request.resource.data.email == request.auth.token.email;

      // Users can only update their own profile with specific fields
      allow update: if isOwner(userId)
                    && request.resource.data.keys().hasOnly(['username', 'bio', 'avatarUrl', 'location', 'favoritePlants', 'stripeAccountId', 'stripeDetailsSubmitted', 'following']);
    }
    
    // USER SUBCOLLECTIONS
    match /users/{userId}/{collection}/{docId} {
        // Only the user can access their own subcollections (e.g., notifications)
        allow read, write, delete: if isOwner(userId);
    }

    // PLANT LISTINGS
    match /plants/{plantId} {
      // Anyone can read plant listings
      allow get: if true;

      // Authenticated users can create new listings
      allow create: if isSignedIn()
                    && request.resource.data.ownerId == request.auth.uid;
      
      // Only the owner can update their listing
      allow update: if isSignedIn() 
                    && isOwner(resource.data.ownerId);

      // Only the owner can delete their listing
      allow delete: if isSignedIn()
                    && isOwner(resource.data.ownerId);
    }
    
    // ORDERS
    match /orders/{orderId} {
        // Orders are created server-side by webhooks, no client creation.
        allow create: if false;

        // Only the buyer or seller can read the order
        allow get: if isSignedIn() && (isOwner(resource.data.userId) || isOwner(resource.data.sellerId));
        
        // Updates should be handled server-side
        allow update, delete: if false;
    }
    
    // CHATS & MESSAGES
    match /chats/{chatId} {
      // Only participants can read the chat document
      allow get: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      // Chat documents are created programmatically, not directly by clients
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.participants;
      
      // Only participants can update chat (e.g., last message)
      allow update: if isSignedIn() && request.auth.uid in resource.data.participants;
      
      match /messages/{messageId} {
        // Only participants can list/read messages
        allow list, get: if isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        
        // Only participants can create messages
        allow create: if isSignedIn() 
                      && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants
                      && request.resource.data.senderId == request.auth.uid;
      }
    }
    
    // FORUMS, POSTS, & COMMENTS
    match /forums/{forumId} {
      // Anyone can read forum details
      allow get: if true;
      
      // Authenticated users can create forums
      allow create: if isSignedIn() && request.resource.data.creatorId == request.auth.uid;
      
      // Only the creator or a moderator can update forum details
      allow update: if isSignedIn() && isModerator(forumId);
      
      // Only the creator can delete a forum
      allow delete: if isSignedIn() && isOwner(resource.data.creatorId);
      
      // POSTS
      match /posts/{postId} {
        // Anyone can read posts
        allow get, list: if true;
        
        // Authenticated users can create posts
        allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
        
        // Only the post author or a moderator can update/delete
        allow update, delete: if isSignedIn() && (isOwner(resource.data.authorId) || isModerator(forumId));
        
        // COMMENTS
        match /comments/{commentId} {
            // Anyone can read comments
            allow get, list: if true;
            
            // Authenticated users can create comments
            allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
            
            // Only the comment author can update/delete their own comment
            allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);
        }
      }
    }
    
    // REWARDS TRANSACTIONS
    match /rewardsTransactions/{transactionId} {
      // These are created server-side. Clients can read their own.
      allow create: if false;
      allow get: if isSignedIn() && isOwner(resource.data.userId);
      allow list: if isSignedIn(); // Requires index-based query rules
      allow update, delete: if false;
    }
  }
}
